* global
** Config load path
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))
#+end_src
** replace tabs with spaces
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
** custom file
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
** Putting all files in one directory
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** enable org-indent-mode for org-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode 1))
#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode . "")
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d")
    (setq ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    )
#+end_src
** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
           ("\C-x \C-f" . counsel-find-file)))
#+end_src
** swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("\C-s" . swiper)))
#+end_src

* Quick editting
** indent buffer
#+begin_src emacs-lisp
  (defun jocoo/indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))
#+end_src
** new defun at point
#+begin_src emacs-lisp
  (defun jocoo/new-defun-at-point ()
    (interactive)
    (let* ((bounds (bounds-of-thing-at-point 'sexp))
           (begin (car bounds))
           (end (cdr bounds))
           (defun-name (buffer-substring begin end))
           (cursor-placeholder "|"))
      (beginning-of-defun)
      (insert (format "(defun %s ()" defun-name))
      (newline-and-indent)
      (insert cursor-placeholder)
      (newline-and-indent)
      (insert ")")
      (newline 2)
      (search-backward cursor-placeholder)
      (forward-char 1)
      (delete-char -1)
      (jocoo/indent-buffer)))
  (global-set-key (kbd "C-c ndef") 'jocoo/new-defun-at-point)
#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-c j") 'avy-goto-char)
    (global-set-key (kbd "C-c g") 'avy-goto-word-or-subword-1))
#+end_src
** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)

  (require 'multiple-cursors)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
** expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)))
#+end_src
** insert new line above current line
#+begin_src emacs-lisp
  (defun jocoo/insert-new-line-before-current (times)
    (interactive "p")
    (move-beginning-of-line 1)
    (newline times)
    (previous-line times)
    (indent-for-tab-command))
  (global-set-key (kbd "C-S-o") 'jocoo/insert-new-line-before-current)
#+end_src
** insert new line below current line
#+begin_src emacs-lisp
  (defun jocoo/insert-new-line-below-current (times)
    (interactive "P")
    (move-end-of-line 1)
    (newline times)
    (indent-for-tab-command))
  (global-set-key (kbd "C-o") 'jocoo/insert-new-line-below-current)
#+end_src
** move to beginning of line with contents
#+begin_src emacs-lisp
  (defun jocoo/move-to-beginning-of-line-with-contents ()
    (interactive)
    (beginning-of-line)
    (ignore-errors (search-forward-regexp "^[ \t]+" (cdr (bounds-of-thing-at-point 'line)))))
  (global-set-key (kbd "C-c ^") 'jocoo/move-to-beginning-of-line-with-contents)
#+end_src
** clear line and indent
#+begin_src emacs-lisp
  (defun jocoo/clear-line-and-indent ()
    (interactive)
    (jocoo/move-to-beginning-of-line-with-contents)
    (kill-line))
  (global-set-key (kbd "C-c S") 'jocoo/clear-line-and-indent)
#+end_src
** join next line
#+begin_src emacs-lisp
  (defun jocoo/join-next-line ()
    (interactive)
    (next-line)
    (join-line))
  (global-set-key (kbd "C-c J") 'jocoo/join-next-line)
#+end_src
** move to char
#+begin_src emacs-lisp
  (defun jocoo/move-to-char-forward (char)
    (interactive "cChar:")
    (search-forward (char-to-string char)))
  (global-set-key (kbd "C-c f") 'jocoo/move-to-char-forward)

  (defun jocoo/move-to-char-backward (char)
    (interactive "cChar:")
    (search-backward (char-to-string char)))
  (global-set-key (kbd "C-c F") 'jocoo/move-to-char-backward)
#+end_src
** copy/delete chars words lines paragraphs
#+begin_src emacs-lisp
  ;; operate region macro
  (defmacro jocoo/region-operate (op-name unit op)
    `(defun ,(intern (concat "jocoo/" op-name "-" unit "-under")) (arg)
       (interactive "p")
       (let ((count (or arg 1)) (beg) (end) (bound))
         (setq bound (bounds-of-thing-at-point (quote ,(intern unit))))
         (setq beg (car bound))
         (save-excursion
           (goto-char beg)
           (,(intern (concat "forward-" unit)) count)
           (setq end (point)))
         (,op beg end)
         (message ,(concat op-name " " unit "%s") (if (> count 1) "s" "")))))

  ;; char operation
  (jocoo/region-operate "copy" "char" copy-region-as-kill)
  (jocoo/region-operate "delete" "char" kill-region)
  (global-set-key (kbd "C-c c c") 'jocoo/copy-char-under)
  (global-set-key (kbd "C-c d c") 'jocoo/delete-char-under)

  ;; word operation
  (jocoo/region-operate "copy" "word" copy-region-as-kill)
  (jocoo/region-operate "delete" "word" kill-region)
  (global-set-key (kbd "C-c c w") 'jocoo/copy-word-under)
  (global-set-key (kbd "C-c d w") 'jocoo/delete-word-under)

  ;; line operation
  (jocoo/region-operate "copy" "line" copy-region-as-kill)
  (jocoo/region-operate "delete" "line" kill-region)
  (global-set-key (kbd "C-c c l") 'jocoo/copy-line-under)
  (global-set-key (kbd "C-c d l") 'jocoo/delete-line-under)

  ;; paragraph operation
  (jocoo/region-operate "copy" "paragraph" copy-region-as-kill)
  (jocoo/region-operate "delete" "paragraph" kill-region)
  (global-set-key (kbd "C-c c p") 'jocoo/copy-paragraph-under)
  (global-set-key (kbd "C-c d p") 'jocoo/delete-paragraph-under)
  (global-set-key (kbd "C-c v p") 'mark-paragraph)
#+end_src
** zap [up] to char operations
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c z c") 'zap-to-char)
  (defun jocoo/zap-up-to-char (args char)
    (interactive "p\ncZap up to char:")
    (zap-to-char args char)
    (insert char)
    (forward-char -1))
  (global-set-key (kbd "C-c z u") 'jocoo/zap-up-to-char)
#+end_src
** Replacing the preceding sexp with its value.
#+begin_src emacs-lisp
  (defun jocoo/eval-and-replace ()
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c C-e") 'jocoo/eval-and-replace)
#+end_src
** find file at position
#+begin_src emacs-lisp
  (global-set-key (kbd "C-]") 'ffap)
#+end_src
** delete region when typing
#+begin_src emacs-lisp
  (pending-delete-mode t)
#+end_src
** enable paren mode
#+begin_src emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)
#+end_src
** move more quickly
#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))
#+end_src
** removes file connected to current buffer and kills buffer
#+begin_src emacs-lisp
  (defun jocoo/delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p (format "Are you sure to remove this file '%s'?" filename))
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed." filename)))))

  (global-set-key (kbd "C-x C-k") 'jocoo/delete-current-buffer-file)
#+end_src
** rename buffer file name
#+begin_src emacs-lisp
  (defun jocoo/rename-current-buffer-file ()
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully rename to '%s'"
                     name (file-name-nondirectory new-name)))))))
  (global-set-key (kbd "C-c rf") 'jocoo/rename-current-buffer-file)
#+end_src
** copy current buffer file path
#+begin_src emacs-lisp
  (defun jocoo/copy-buffer-file-path ()
    (interactive)
    (let ((filepath (buffer-file-name)))
      (if (not (and filepath (file-exists-p filepath)))
          (message "no file connect to this buffer.")
        (kill-new filepath)
        (message "'%s' copyed." filepath))))

  (global-set-key (kbd "C-c b f p") 'jocoo/copy-buffer-file-path)
#+end_src
** move line up and down
#+begin_src emacs-lisp
  (defun jocoo/move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))
  (global-set-key (kbd "<C-S-down>") 'jocoo/move-line-down)

  (defun jocoo/move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (forward-line -2)
      (move-to-column col)))
  (global-set-key (kbd "<C-S-up>") 'jocoo/move-line-up)
#+end_src
** repeat current line
#+begin_src emacs-lisp
  (defun jocoo/repeat-current-line ()
    (interactive)
    (let* ((line-bounds (bounds-of-thing-at-point 'line))
           (line-begin (car line-bounds))
           (line-end (cdr line-bounds))
           (point (point)))
      (move-beginning-of-line 1)
      (insert (buffer-substring line-begin line-end))
      (goto-char point)
      (next-line)))
  (global-set-key (kbd "C-c r l") 'jocoo/repeat-current-line)
#+end_src
** reformat buffer
#+begin_src emacs-lisp
  (defun jocoo/reformat-buffer ()
    "indent current buffer"
    (interactive)
    (save-excursion 
      (indent-region (point-min) (point-max))))
  (global-set-key (kbd "C-c re") 'jocoo/reformat-buffer)
#+end_src
** kill s-expression
#+begin_src emacs-lisp
  (defun jocoo/current-parse-state ()
    (let ((point (point)))
      (beginning-of-defun)
      (parse-partial-sexp (point) point)))

  (defun jocoo/in-string-p (&optional state)
    (and (nth 3 (jocoo/current-parse-state)) t))

  (defun jocoo/string-start+end-points ()
    "Return cons of starts and ends of the string currently in"
    (save-excursion
      (let ((start (nth 8 (jocoo/current-parse-state))))
        (goto-char start)
        (forward-sexp)
        (cons start (point)))))

  (defun jocoo/kill-line-in-string ()
    (if (save-excursion (skip-chars-forward " \t\n" (point-max))
                        (eolp))
        (kill-line)
      (kill-region (point) (1- (cdr (jocoo/string-start+end-points)))))
    )

  (defun jocoo/sexp-start+end-points ()
    "Return cons of starts and ends of the sexp currently in"
    (save-excursion
      (let ((start (car (last (nth 9 (jocoo/current-parse-state))))))
        (goto-char (or start (point)))
        (forward-sexp)
        (cons start (point)))))

  (defun jocoo/kill-sexp ()
    (interactive)
    (if (jocoo/in-string-p)
        (jocoo/kill-line-in-string)
      (kill-region (point) (1- (cdr (jocoo/sexp-start+end-points))))))

  (add-hook 'lisp-interaction-mode-hook
            (lambda ()
              (local-set-key (kbd "C-k") 'jocoo/kill-sexp)))
#+end_src
** wrap current s-expression
#+begin_src emacs-lisp
  (defun jocoo/wrap-sexp ()
    (interactive)  
    (let ((bounds (jocoo/sexp-start+end-points)))
      (goto-char (cdr bounds))
      (insert ")")
      (goto-char (car bounds))
      (insert "(")
      (jocoo/indent-buffer)))

  (add-hook 'lisp-interaction-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c C-w") 'jocoo/wrap-sexp)))
#+end_src
** trim sexp
#+begin_src emacs-lisp
  (defun jocoo/trim-sexp ()
    "remove the function header of the current sexp.
  exp:
      (fun |VARLIST) -> VARLIST
  "
    (interactive)
    (save-excursion
      (when (re-search-backward "([a-zA-Z0-9-]+" nil t)
        (let ((bounds (bounds-of-thing-at-point 'sexp)))
          (goto-char (cdr bounds))
          (backward-delete-char 1)
          (goto-char (car bounds))
          (when (re-search-forward "([a-zA-Z0-9-]+\\( \\|\n\\)" nil t)
            (delete-region (car bounds) (point)))
          (indent-region (point-min) (point-max))))))
  (add-hook 'lisp-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c tr") 'jocoo/trim-sexp)))

  (add-hook 'lisp-interaction-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c tr") 'jocoo/trim-sexp)))
#+end_src
** toggle quotes
#+begin_src emacs-lisp
  (use-package toggle-quotes
    :ensure t
    :config
    (global-set-key (kbd "C-'") 'toggle-quotes)
    )
#+end_src

* Restclient
#+begin_src emacs-lisp
  (autoload 'restclient "restclient.el")
#+end_src
* appearance
** disable startup page and all bars
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** set line number
#+begin_src emacs-lisp
  ;; (global-linum-mode t)
#+end_src
** set color theme
#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
  ;; (setq after-load-theme-hook
  ;;       (lambda ()
  ;;         (set-face-background 'linum (face-attribute 'default :background))
  ;;         (set-face-foreground 'linum "#555555")))

  (use-package spacemacs-theme 
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-light t))
#+end_src
** set region face in windows
#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt")
    (set-face-attribute 'region nil :background "#FFF" :foreground "#93A1A1"))
#+end_src
** set default font
#+begin_src emacs-lisp
  (cond ((string-equal system-type "darwin")
         (set-default-font "Monaco-13"))
        ((or (string-equal system-type "gnu/linux")
             (string-equal system-type "windows-nt"))
         (set-default-font "Fira Code-11")))
#+end_src
** set startup frame size 
#+begin_src emacs-lisp
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; split window horizontally
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
#+end_src
** beacon
#+begin_src emacs-lisp
  ;; (require 'beacon)
  ;; (beacon-mode 1)
  ;; (setq beacon-color "#bc6ec5")
#+end_src
** highlight current line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
** silent blink cursors
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src
* auto complete
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'yas-minor-mode)
    :config
    (yas-reload-all)
    (yas-global-mode 1)
    (use-package yasnippet-snippets
      :ensure t)
    )
#+end_src
** company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idel-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-backends
          '((company-files comapny-yasnippet company-keywords company-capf)
            (company-abbrev company-dabbrev)))
    )

  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (add-to-list (make-local-variable 'company-backends)
                           'company-elisp)))


  (use-package company-c-headers
    :ensure t
    :config
    (eval-after-load 'c-mode-common-hook
      (progn
        (setq company-backends (delete 'company-semantic company-backends))
        (add-to-list 'company-backends 'company-c-headers))))
#+end_src
* project
** files tree
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (global-set-key [f8] 'neotree-toggle))
#+end_src
** helm ggtags
#+begin_src emacs-lisp
  ;; (use-package helm
  ;;   :ensure t
  ;;   :config
  ;;   (global-set-key (kbd "M-x") #'helm-M-x)
  ;;   (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  ;;   (global-set-key (kbd "C-x C-f") #'helm-find-files)
  ;;   (helm-mode 1))

  ;; (use-package ggtags
  ;;   :ensure t)

  ;; (use-package helm-gtags
  ;;   :ensure t
  ;;   :config
  ;;   ;;; Enable helm-gtags-mode
  ;;   (add-hook 'c-mode-hook 'helm-gtags-mode)
  ;;   (add-hook 'c++-mode-hook 'helm-gtags-mode)
  ;;   (add-hook 'java-mode-hook 'helm-gtags-mode)

  ;;   ;; customize
  ;;   (custom-set-variables
  ;;    '(helm-gtags-path-style 'relative)
  ;;    '(helm-gtags-ignore-case t)
  ;;    '(helm-gtags-auto-update t))

  ;;   ;; key bindings
  ;;   (with-eval-after-load 'helm-gtags
  ;;     (define-key helm-gtags-mode-map (kbd "M-]") 'helm-gtags-find-tag-from-here)
  ;;     (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
  ;;     (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
  ;;     (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
  ;;     (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
  ;;     (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  ;;     (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
  ;;     (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))
#+end_src
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  (use-package helm-projectile
    :ensure t)
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("\C-x g" . magit-status)))
#+end_src
* utils
#+begin_src emacs-lisp
  (defun show-last-command ()
    "Print the command name latest executed."
    (interactive)
    (eval-expression 'last-command))
  (global-set-key (kbd "C-c C-l") 'show-last-command)
#+end_src
** translate
#+begin_src emacs-lisp
  (autoload 'translate "translate.el")
#+end_src
* js dev
** js2-mode
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js\\'" . js2-mode)
           ("\\.json\\'" . javascript-mode))
    :init
    (setq js2-basic-offset 2)
    (setq js2-global-externs '("module" "require" "assert" "setInterval" "console" "__dirname__"))
    )
#+end_src
** typescript
#+begin_src emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (setq company-tooltip-align-annotations t)

  (add-hook 'js2-mode-hook #'setup-tide-mode)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode))
    :config
    (setq tide-completion-enable-autoimport-suggestions t))
#+end_src
** prettier
#+begin_src emacs-lisp
  (use-package prettier-js
    :ensure t
    :hook ((js2-mode . prettier-js-mode))
    :config
    (setq prettier-js-args '(
                             "--trailing-comma" "all"
                             "--backet-spacing" "false")))
#+end_src

